steps:
  # Step 1: Prepare secret
  - name: 'gcr.io/cloud-builders/gcloud'
    args: ['secrets', 'versions', 'access', 'latest', '--secret=service-account', '--format=get(payload.data)', '--project=$PROJECT_ID']
    id: 'get_secret'
    waitFor: ['-']

  # Step 2: Write secret to file
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "$$SECRET" | base64 --decode > /workspace/service-account.json
    env: ['SECRET=$$get_secret']
    id: 'setup_secret'
    waitFor: ['get_secret']

  # Step 3: Build and run with Docker Compose
  - name: 'docker/compose:1.29.2'
    args: ['up', '--build', '-d']
    env: ['DOCKER_HOST=tcp://localhost:2375']
    waitFor: ['setup_secret']

  # Step 4: Run tests for event_management_commands and generate coverage report
  - name: 'docker/compose:1.29.2'
    args:
      - 'run'
      - '--rm'
      - 'event_management_commands'
      - 'bash'
      - '-c'
      - |
        python -m coverage run --source=. -m unittest discover -s tests &&
        python -m coverage xml -o coverage.xml
    env: ['DOCKER_HOST=tcp://localhost:2375']
    waitFor: ['setup_secret']

  # Optionally, gather and store the coverage reports or other artifacts
  - name: 'gcr.io/cloud-builders/gsutil'
    args: ['cp', '/workspace/event_management_commands/coverage.xml', 'gs://$PROJECT_ID-coverage-reports/$BUILD_ID-coverage.xml']

  # Step 5: Shutdown services
  - name: 'docker/compose:1.29.2'
    args: ['down']

timeout: '1200s'  # Adjust the timeout to your needs

# Variables to manage Docker in Cloud Build
options:
  env: ['_DOCKER_HOST=tcp://localhost:2375']
  default_logs_bucket_behavior: REGIONAL_USER_OWNED_BUCKET
  substitution_option: ALLOW_LOOSE
