steps:
  # Build and push the Event Management Commands service
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '--platform', 'linux/amd64', '-t', 'gcr.io/$PROJECT_ID/event-management-commands:$SHORT_SHA', '.']
    dir: 'Backend/core_functionalities/event_management_commands'

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/event-management-commands:$SHORT_SHA']

  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        docker run --rm gcr.io/$PROJECT_ID/event-management-commands:$SHORT_SHA python -m coverage run --source=. -m unittest discover -s tests && \
        docker run --rm gcr.io/$PROJECT_ID/event-management-commands:$SHORT_SHA python -m coverage xml -o coverage.xml

  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        docker run --rm \
          -e SONAR_TOKEN=${_SONAR_TOKEN} \
          -v $(pwd)/Backend/core_functionalities/event-management-commands:/usr/src \
          sonarsource/sonar-scanner-cli \
          -Dsonar.projectKey=${_SONAR_PROJECT_KEY} \
          -Dsonar.organization=${_SONAR_ORG} \
          -Dsonar.sources=. \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.python.coverage.reportPaths=coverage.xml
    secretEnv: ['SONAR_TOKEN', 'SONAR_PROJECT_KEY', 'SONAR_ORG']

  # Build and push the Event Management Queries service
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '--platform', 'linux/amd64', '-t', 'gcr.io/$PROJECT_ID/event-management-queries:$SHORT_SHA', '.']
    dir: 'Backend/core_functionalities/event_management_queries'

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/event-management-queries:$SHORT_SHA']

  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        docker run --rm gcr.io/$PROJECT_ID/event-management-queries:latest python -m coverage run --source=. -m unittest discover -s tests && \
        docker run --rm gcr.io/$PROJECT_ID/event-management-queries:$SHORT_SHA python -m coverage xml -o coverage.xml

  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        docker run --rm \
          -e SONAR_TOKEN=${_SONAR_TOKEN} \
          -v $(pwd)/Backend/core_functionalities/event-management-queries:/usr/src \
          sonarsource/sonar-scanner-cli \
          -Dsonar.projectKey=${_SONAR_PROJECT_KEY} \
          -Dsonar.organization=${_SONAR_ORG} \
          -Dsonar.sources=. \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.python.coverage.reportPaths=coverage.xml
    secretEnv: ['SONAR_TOKEN', 'SONAR_PROJECT_KEY', 'SONAR_ORG']

  # Build and push the Service Management service
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '--platform', 'linux/amd64', '-t', 'gcr.io/$PROJECT_ID/service-management:$SHORT_SHA', '.']
    dir: 'Backend/core_functionalities/service_management'

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/service-management:$SHORT_SHA']

  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        docker run --rm gcr.io/$PROJECT_ID/service-management:latest python -m coverage run --source=. -m unittest discover -s tests && \
        docker run --rm gcr.io/$PROJECT_ID/service-management:$SHORT_SHA python -m coverage xml -o coverage.xml

  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        docker run --rm \
          -e SONAR_TOKEN=${_SONAR_TOKEN} \
          -v $(pwd)/Backend/core_functionalities/service-management:/usr/src \
          sonarsource/sonar-scanner-cli \
          -Dsonar.projectKey=${_SONAR_PROJECT_KEY} \
          -Dsonar.organization=${_SONAR_ORG} \
          -Dsonar.sources=. \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.python.coverage.reportPaths=coverage.xml
    secretEnv: ['SONAR_TOKEN', 'SONAR_PROJECT_KEY', 'SONAR_ORG']

  # Build and push the Training Management Commands service
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '--platform', 'linux/amd64', '-t', 'gcr.io/$PROJECT_ID/training-management-commands:$SHORT_SHA', '.']
    dir: 'Backend/core_functionalities/training_management_commands'

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/training-management-commands:$SHORT_SHA']

  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        docker run --rm gcr.io/$PROJECT_ID/training-management-commands:latest python -m coverage run --source=. -m unittest discover -s tests && \
        docker run --rm gcr.io/$PROJECT_ID/training-management-commands:$SHORT_SHA python -m coverage xml -o coverage.xml

  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        docker run --rm \
          -e SONAR_TOKEN=${_SONAR_TOKEN} \
          -v $(pwd)/Backend/core_functionalities/training-management-commands:/usr/src \
          sonarsource/sonar-scanner-cli \
          -Dsonar.projectKey=${_SONAR_PROJECT_KEY} \
          -Dsonar.organization=${_SONAR_ORG} \
          -Dsonar.sources=. \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.python.coverage.reportPaths=coverage.xml
    secretEnv: ['SONAR_TOKEN', 'SONAR_PROJECT_KEY', 'SONAR_ORG']

  # Build and push the Training Management Queries service
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '--platform', 'linux/amd64', '-t', 'gcr.io/$PROJECT_ID/training-management-queries:$SHORT_SHA', '.']
    dir: 'Backend/core_functionalities/training_management_queries'

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/training-management-queries:$SHORT_SHA']

  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        docker run --rm gcr.io/$PROJECT_ID/training-management-queries:latest python -m coverage run --source=. -m unittest discover -s tests && \
        docker run --rm gcr.io/$PROJECT_ID/training-management-queries:$SHORT_SHA python -m coverage xml -o coverage.xml

  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        docker run --rm \
          -e SONAR_TOKEN=${_SONAR_TOKEN} \
          -v $(pwd)/Backend/core_functionalities/training-management-queries:/usr/src \
          sonarsource/sonar-scanner-cli \
          -Dsonar.projectKey=${_SONAR_PROJECT_KEY} \
          -Dsonar.organization=${_SONAR_ORG} \
          -Dsonar.sources=. \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.python.coverage.reportPaths=coverage.xml
    secretEnv: ['SONAR_TOKEN', 'SONAR_PROJECT_KEY', 'SONAR_ORG']

availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/SONAR_TOKEN/versions/latest
      env: '_SONAR_TOKEN'
    - versionName: projects/$PROJECT_ID/secrets/SONAR_PROJECT_KEY/versions/latest
      env: '_SONAR_PROJECT_KEY'
    - versionName: projects/$PROJECT_ID/secrets/SONAR_ORG/versions/latest
      env: '_SONAR_ORG'

options:
  default_logs_bucket_behavior: REGIONAL_USER_OWNED_BUCKET
  substitution_option: ALLOW_LOOSE