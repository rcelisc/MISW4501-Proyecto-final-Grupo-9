version: '3'

services:

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - em_net
  
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      #KAFKA_LISTENERS: INTERNAL://0.0.0.0:9093,EXTERNAL://0.0.0.0:9092
      #KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      #KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      #KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9093,EXTERNAL://localhost:9092
      #KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://:9092
      #KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    networks:
      - em_net
  
  db_event_management_commands:
    image: postgres:13
    container_name: db_em_commands
    environment:
      POSTGRES_DB: db_event_management_commands
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: emCommands
    networks:
      - em_net

    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgres -d db_event_management_commands"]
        interval: 5s
        timeout: 10s
        retries: 5

  event_management_commands:
    build:
      context: ./core_functionalities/event_management_commands
    container_name: event_management_commands_container
    ports:
      - "3001:3001"
    depends_on:
      - db_event_management_commands
    environment:
      DATABASE_URL: postgresql://postgres:emCommands@db_event_management_commands:5432/db_event_management_commands
    networks:
      - em_net

  db_event_management_queries:
    image: postgres:13
    container_name: db_em_queries
    environment:
      POSTGRES_DB: db_event_management_queries
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: emQueries
    networks:
      - em_net

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d db_event_management_queries"]
      interval: 5s
      timeout: 10s
      retries: 5

  event_management_queries:
    build:
      context: ./core_functionalities/event_management_queries
    container_name: event_management_queries_container
    ports:
      - "3002:3002"
    depends_on:
      db_event_management_queries:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      DATABASE_URL: postgresql://postgres:emQueries@db_event_management_queries:5432/db_event_management_queries
    networks:
      - em_net

  db_training_management_commands:
    image: postgres:13
    container_name: db_tm_commands
    environment:
      POSTGRES_DB: db_training_management_commands
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: tmCommands
    networks:
      - em_net

    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgres -d db_training_management_commands"]
        interval: 5s
        timeout: 10s
        retries: 5

  training_management_commands:
    build:
      context: ./core_functionalities/training_management_commands
    container_name: training_management_commands_container
    ports:
      - "3004:3004"
    depends_on:
      - db_training_management_commands
    environment:
      DATABASE_URL: postgresql://postgres:tmCommands@db_training_management_commands:5432/db_training_management_commands
    networks:
      - em_net

  db_training_management_queries:
    image: postgres:13
    container_name: db_tm_queries
    environment:
      POSTGRES_DB: db_training_management_queries
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: tmQueries
    networks:
      - em_net

    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgres -d db_training_management_queries"]
        interval: 5s
        timeout: 10s
        retries: 5

  training_management_queries:
    build:
      context: ./core_functionalities/training_management_queries
    container_name: training_management_queries_container
    ports:
      - "3003:3003"
    depends_on:
      db_training_management_queries:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      DATABASE_URL: postgresql://postgres:tmQueries@db_training_management_queries:5432/db_training_management_queries
    networks:
      - em_net

  db_service_management:
      image: postgres:13
      container_name: db_service_management
      environment:
        POSTGRES_DB: db_service_management
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: smServices
      networks:
        - em_net

      healthcheck:
          test: ["CMD-SHELL", "pg_isready -U postgres -d db_service_management"]
          interval: 5s
          timeout: 10s
          retries: 5

  service_management:
    build:
      context: ./core_functionalities/services_management
    container_name: service_management_container
    ports:
      - "3005:3005"
    depends_on:
      db_service_management:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://postgres:smServices@db_service_management:5432/db_service_management
    networks:
      - em_net

networks:
  # app_net:
  tmq_net:
  em_net:
    driver: bridge